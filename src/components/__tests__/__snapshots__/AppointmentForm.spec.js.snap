// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppointmentForm component renders input fields for appointment data 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <KeyboardAwareScrollView
    enableAutoAutomaticScroll={true}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={0}
    keyboardOpeningTime={250}
    keyboardShouldPersistTaps="handled"
    style={
        Object {
            "backgroundColor": "white",
            "paddingHorizontal": 16,
          }
    }
>
    <View
        style={
            Object {
                "height": 32,
              }
        }
    />
    <Fields
        component={[Function]}
        format={[Function]}
        label="Time"
        names={
            Array [
                "starttime",
                "endtime",
              ]
        }
        onExpand={[Function]}
        parse={[Function]}
        withRef={true}
    />
    <View
        style={
            Object {
                "height": 24,
              }
        }
    />
    <Field
        component={[Function]}
        label="Starts"
        name="startdate"
        onExpand={[Function]}
        withRef={true}
    />
    <View
        style={
            Object {
                "height": 24,
              }
        }
    />
    <Field
        component={[Function]}
        label="Ends"
        name="enddate"
        onExpand={[Function]}
        withRef={true}
    />
    <View
        style={
            Object {
                "height": 24,
              }
        }
    />
    <Field
        component={[Function]}
        name="recurrence"
        onRecurrencePress={[Function]}
    />
    <View
        style={
            Object {
                "height": 24,
              }
        }
    />
    <View
        style={
            Object {
                "height": 24,
              }
        }
    />
    <Field
        component={[Function]}
        name="location"
        onFocus={[Function]}
        placeholder="Location"
    />
    <View
        style={
            Object {
                "height": 24,
              }
        }
    />
    <Field
        component={[Function]}
        name="type"
        onFocus={[Function]}
        placeholder="Type (e.g. lecture, tutorial)"
    />
</KeyboardAwareScrollView>,
  "nodes": Array [
    <KeyboardAwareScrollView
      enableAutoAutomaticScroll={true}
      enableResetScrollToCoords={true}
      extraHeight={75}
      extraScrollHeight={0}
      keyboardOpeningTime={250}
      keyboardShouldPersistTaps="handled"
      style={
            Object {
                  "backgroundColor": "white",
                  "paddingHorizontal": 16,
                }
      }
>
      <View
            style={
                  Object {
                        "height": 32,
                      }
            }
      />
      <Fields
            component={[Function]}
            format={[Function]}
            label="Time"
            names={
                  Array [
                        "starttime",
                        "endtime",
                      ]
            }
            onExpand={[Function]}
            parse={[Function]}
            withRef={true}
      />
      <View
            style={
                  Object {
                        "height": 24,
                      }
            }
      />
      <Field
            component={[Function]}
            label="Starts"
            name="startdate"
            onExpand={[Function]}
            withRef={true}
      />
      <View
            style={
                  Object {
                        "height": 24,
                      }
            }
      />
      <Field
            component={[Function]}
            label="Ends"
            name="enddate"
            onExpand={[Function]}
            withRef={true}
      />
      <View
            style={
                  Object {
                        "height": 24,
                      }
            }
      />
      <Field
            component={[Function]}
            name="recurrence"
            onRecurrencePress={[Function]}
      />
      <View
            style={
                  Object {
                        "height": 24,
                      }
            }
      />
      <View
            style={
                  Object {
                        "height": 24,
                      }
            }
      />
      <Field
            component={[Function]}
            name="location"
            onFocus={[Function]}
            placeholder="Location"
      />
      <View
            style={
                  Object {
                        "height": 24,
                      }
            }
      />
      <Field
            component={[Function]}
            name="type"
            onFocus={[Function]}
            placeholder="Type (e.g. lecture, tutorial)"
      />
</KeyboardAwareScrollView>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <AppointmentForm
        onRecurrencePress={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": AppointmentForm {
        "_closeExpandedField": [Function],
        "_fieldRefs": Object {},
        "_handleExpand": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onRecurrencePress": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <KeyboardAwareScrollView
          enableAutoAutomaticScroll={true}
          enableResetScrollToCoords={true}
          extraHeight={75}
          extraScrollHeight={0}
          keyboardOpeningTime={250}
          keyboardShouldPersistTaps="handled"
          style={
                    Object {
                              "backgroundColor": "white",
                              "paddingHorizontal": 16,
                            }
          }
>
          <View
                    style={
                              Object {
                                        "height": 32,
                                      }
                    }
          />
          <Fields
                    component={[Function]}
                    format={[Function]}
                    label="Time"
                    names={
                              Array [
                                        "starttime",
                                        "endtime",
                                      ]
                    }
                    onExpand={[Function]}
                    parse={[Function]}
                    withRef={true}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    label="Starts"
                    name="startdate"
                    onExpand={[Function]}
                    withRef={true}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    label="Ends"
                    name="enddate"
                    onExpand={[Function]}
                    withRef={true}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    name="recurrence"
                    onRecurrencePress={[Function]}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    name="location"
                    onFocus={[Function]}
                    placeholder="Location"
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    name="type"
                    onFocus={[Function]}
                    placeholder="Type (e.g. lecture, tutorial)"
          />
</KeyboardAwareScrollView>,
        "_debugID": 2,
        "_renderedOutput": <KeyboardAwareScrollView
          enableAutoAutomaticScroll={true}
          enableResetScrollToCoords={true}
          extraHeight={75}
          extraScrollHeight={0}
          keyboardOpeningTime={250}
          keyboardShouldPersistTaps="handled"
          style={
                    Object {
                              "backgroundColor": "white",
                              "paddingHorizontal": 16,
                            }
          }
>
          <View
                    style={
                              Object {
                                        "height": 32,
                                      }
                    }
          />
          <Fields
                    component={[Function]}
                    format={[Function]}
                    label="Time"
                    names={
                              Array [
                                        "starttime",
                                        "endtime",
                                      ]
                    }
                    onExpand={[Function]}
                    parse={[Function]}
                    withRef={true}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    label="Starts"
                    name="startdate"
                    onExpand={[Function]}
                    withRef={true}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    label="Ends"
                    name="enddate"
                    onExpand={[Function]}
                    withRef={true}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    name="recurrence"
                    onRecurrencePress={[Function]}
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    name="location"
                    onFocus={[Function]}
                    placeholder="Location"
          />
          <View
                    style={
                              Object {
                                        "height": 24,
                                      }
                    }
          />
          <Field
                    component={[Function]}
                    name="type"
                    onFocus={[Function]}
                    placeholder="Type (e.g. lecture, tutorial)"
          />
</KeyboardAwareScrollView>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <AppointmentForm
    onRecurrencePress={[Function]}
/>,
}
`;
